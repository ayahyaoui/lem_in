/*
t_fusion		*create_fusion(t_path *p, int max)
{
	t_fusion *fusion;
	int i;

	if(!(fusion = (t_fusion *)malloc(sizeof(t_fusion))))
		exit(3);
	fusion->nb_path = p->nb_path;
	fusion->altern = 1;
	if (!(fusion->fusion  = (t_breakdown **)malloc(sizeof(t_breakdown*) *
					(p->nb_path + 1))))
		exit(3);
	i = -1;
	while ((unsigned int)++i < p->nb_path)
	{
		fusion->fusion[i] = (t_breakdown*)malloc(sizeof(t_breakdown));
		fusion->fusion[i]->value = p->path[i][VALUE];
		fusion->fusion[i]->cost = p->path[i][COST];
		fusion->fusion[i]->breakdown = malloc(sizeof(int) * max);
		fusion->fusion[i]->breakdown[0] = p->path[i][VALUE];
		fusion->fusion[i]->len = 1;
	}
	fusion->fusion[i] = 0x0;
	return (fusion);
}*/
/*
t_big_tab		*new_big_tab(t_graphe *g)
{
//	int			i;
	t_big_tab	*s;
//	int			j;
//	int			k;

	if (g == 0x0 || g->nb_rooms == 0)
		return (0x0);
	if (!(s = malloc(sizeof(t_big_tab))))
		exit(3);
	s->taille = g->nb_rooms;
	s->tab = create_tab(g->nb_rooms, -1);
	s->t2 = create_tab(g->nb_rooms, -1);
	s->t1 = create_tab(g->nb_rooms, -1);
	return (s);
}*/
/*
t_graphe		*new_graphe(int taille)
{
	t_graphe *g;

	if(!(g = (t_graphe*)malloc(sizeof(t_graphe))))
		exit(3);
	g->nb_rooms = taille;
	g->map = create_double_tab(g->nb_rooms, 0);
	g->color = create_tab(g->nb_rooms, 0);
	return (g);
}
*
